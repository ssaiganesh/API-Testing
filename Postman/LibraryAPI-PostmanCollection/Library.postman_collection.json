{
	"info": {
		"_postman_id": "b46e6d4c-f53b-4760-8125-fe578753e9fd",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24198204"
	},
	"item": [
		{
			"name": "Add Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assetions validations - response\r",
							"\r",
							"// tests[\"Status Code is 200\"]= pm.response.to.have.status(200);\r",
							"\r",
							"// pm.collectionVariables.set(\"flag\", false);\r",
							"\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"book_id\", jsonData.ID)\r",
							"\r",
							"function generateBookId()\r",
							"{\r",
							"    const expected_id = req.isbn + req.aisle;\r",
							"    return expected_id;\r",
							"}\r",
							"\r",
							"// function cleanupScript()\r",
							"// {\r",
							"//     const bookID = generateBookId();\r",
							"//     pm.environment.set(\"book_id\", bookID)\r",
							"//     pm.collectionVariables.set(\"flag\", true);\r",
							"\r",
							"//     postman.setNextRequest(\"Delete Book\");\r",
							"     \r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validate Status Code is 200\", ()=>{\r",
							"    try\r",
							"    {\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"        pm.expect(jsonData).have.property(\"Msg\");\r",
							"\r",
							"        pm.expect(jsonData.Msg).to.be.eql(\"successfully added\");\r",
							"\r",
							"    }\r",
							"    catch(err)\r",
							"    {\r",
							"        if(jsonData.Msg.includes(\"Exists\")){\r",
							"            cleanupScript();\r",
							"        }\r",
							"    }\r",
							"    \r",
							"}); \r",
							"\r",
							"pm.test(\"headers cookies reposnsetime validations\", ()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"id logic validation\", () => {\r",
							"    const expected_ID = generateBookId();\r",
							"    pm.expect(expected_ID).to.eql(jsonData.ID);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// associated with request\r",
							"\r",
							"const code = pm.globals.get(\"companyCode\");\r",
							"const val = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"isbn\", code + val);\r",
							"\r",
							"pm.collectionVariables.set(\"book_name\", pm.iterationData.get(\"BookName\"))\r",
							"pm.collectionVariables.set(\"author_name\", pm.iterationData.get(\"Author\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{book_name}}\",\r\n    \"isbn\":\"{{isbn}}\",\r\n    \"aisle\":\"{{$randomInt}}\",\r\n    \"author\":\"{{author_name}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getBookResponse = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"validate the JSON response logic\", () => {\r",
							"    pm.expect(getBookResponse[0].author).to.eql(pm.collectionVariables.get(\"author_name\"));\r",
							"\r",
							"    pm.expect(getBookResponse[0].isbn).to.eql(pm.collectionVariables.get(\"isbn\"));\r",
							"});\r",
							"\r",
							"pm.test(\"validate json respons schema\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"msg\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"msg\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"validate json respons code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    pm.expect(pm.response.json().msg).to.eql(\"book is successfully deleted\");\r",
							"\r",
							"    // if(pm.collectionVariables.get(\"flag\"))\r",
							"    // {\r",
							"    //     postman.setNextRequest(\"Add Book\");\r",
							"    // }\r",
							"})\r",
							"\r",
							"\r",
							"// const cypressObject = jsonData.courses.webAutomation.find(m -> m.courseTitle === \"Cypress\"); //filter will store as array\r",
							"// pm.expect(cypressObject).to.have.all.keys('courseTitle'. 'price');\r",
							"\r",
							"/*\r",
							"let sum  = 0;\r",
							"for(let i = 0 ; i< jsonData.courses.api.length; i ++)\r",
							"{\r",
							"    // convert to integer\r",
							"    sum = sum + parseInt(jsonData.courses.api[i].price); \r",
							"    \r",
							"}\r",
							"\r",
							"pm.expect(sum).to.be.eql(90);\r",
							"\r",
							"const actualCourses = []\r",
							"jsonData.courses.webAutomation.map(m=> actualCourses.push(m.courseTitle))\r",
							"\r",
							"pm.expect(expectedCourses).to.be.eql(actualCourses);\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\":\"{{book_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "flag",
			"value": "false",
			"type": "string"
		}
	]
}